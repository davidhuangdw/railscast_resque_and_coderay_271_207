### markdown: redcarpet

        # highlight code using CodeRay
        gem 'coderay'
        # render:
        class HighlightCode <  Redcarpet::Render::HTML
          def block_code(code, language)                    # use 'block_code' hook
            # CodeRay.scan(code, language).div(line_numbers: :table)
            CodeRay.scan(code, language).div
          end
        end

          def markdown
            @@markdown ||= Redcarpet::Markdown.
                new(HightlightCode.                             # change renderer to HightlightCode
                new(prettify:true, hard_wrap:true),fenced_code_blocks:true)
          end
        # markdown content
        ``` ruby
        ....
        ```

        # render
          def markdown
            @@markdown ||= Redcarpet::Markdown.
                new(Redcarpet::Render::HTML.
                new(prettify:true, hard_wrap:true),fenced_code_blocks:true)
          end
          def bio
            h.sanitize markdown.render(object.bio) if object.bio.present?       # remember to check presence!!
          end

        gem 'redcarpet'

### resque

        # notice: resuqe is based on polling, so slower than beanstalkd

        # start workers
        # sometimes have to restart spring: 'spring stop'
        rake resque:work QUEUE='*'

        # add a job:
        # Resque.enqueue(YourWorkerClass, arg1, arg2, ...)
            Resque.enqueue(SnippetHighlighter, @snippet.id)


        # add worker(jobs):
        # app/workers/...rb
        class SnippetHighlighter
          @queue = :snippets_queue          # define which queue
          def self.perform(snippet_id)      # define perform(*args)
            snippet = Snippet.find(snippet_id)
            uri = URI.parse('http://pygments.appspot.com/')
            request = Net::HTTP.post_form(uri, {'lang' => snippet.language,'code' => snippet.plain_code})
            snippet.update_attribute(:highlighted_code, request.body)
          end
        end

        # lib/tasks/resque.rake: add environment
        require 'resque/tasks'
        task 'resque:setup' => :environment

        # monitor:
        # routes
          mount Resque::Server.new, :at => "/resque"
        # if want auth:
        # initializer/resque_auth.rb
        Resque::Server.use(Rack::Auth::Basic) do |user,password|
          password == 'secret'
        end

        gem 'resque'
